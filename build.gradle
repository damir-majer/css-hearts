plugins {
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.0"
}

group 'ch.css.coaching.hearts'
version '0.1.0-SNAPSHOT'

sourceCompatibility = 14
targetCompatibility = 14
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

ext {
    helidonversion = '2.0.2'
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

dependencies {
    // import Helidon BOM
    implementation enforcedPlatform("io.helidon:helidon-dependencies:${project.helidonversion}")
    implementation 'io.helidon.webserver:helidon-webserver'
    implementation 'io.helidon.webserver:helidon-webserver-tyrus'
    implementation 'io.helidon.media:helidon-media-jsonp'
    implementation 'io.helidon.config:helidon-config-yaml'
    implementation 'io.helidon.health:helidon-health'
    implementation 'io.helidon.health:helidon-health-checks'
    implementation 'io.helidon.metrics:helidon-metrics'

    compile 'com.fasterxml.jackson.core:jackson-databind:2.0.1'



    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'io.helidon.webclient:helidon-webclient'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation("org.assertj:assertj-core:3.16.1")
    testImplementation 'org.awaitility:awaitility:4.0.3'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
}

// define a custom task to copy all dependencies in the runtime classpath
// into build/libs/libs
// uses built-in Copy
task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    into 'build/libs/libs'
}

// add it as a dependency of built-in task 'assemble'
copyLibs.dependsOn jar
assemble.dependsOn copyLibs

// default jar configuration
// set the main classpath
// add each jar under build/libs/libs into the classpath
jar {
    archiveFileName = "${project.name}.jar"
    manifest {
        attributes ('Main-Class': 'ch.css.coaching.hearts.Main',
                'Class-Path': configurations.runtimeClasspath.files.collect { "libs/$it.name" }.join(' ')
        )
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "damir-majer_css-hearts"
        property "sonar.organization", "damir-majer"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
jacocoTestReport {
    reports {
        xml.enabled true
    }
}
test.finalizedBy jacocoTestReport